#Использовать 1commands
#Использовать asserts
#Использовать autumn
#Использовать autumn-logos
#Использовать ".."

Перем Поделка;
Перем ПроксиСервер;
Перем _Конфигуратор;
Перем _Хранилище;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоПравильноОпределяетсяПингКонфигуратора");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоПравильноОпределяетсяНачалоЗапроса");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоПравильноОпределяетсяКонецСообщения");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоРаботаетРазборЗапросаКонфигуратораНаПомещениеВХранилище");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоРаботаетРазборЗапросаКонфигуратораНаИзменениеВерсииВХранилище");
	ВсеТесты.Добавить("ТекстДолжен_ПроверитьЧтоФайлПроверокПодключается");
	ВсеТесты.Добавить("ТестДолженПроверить_ЧтоСоздаетсяФайлИнициализации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьОбщениеИмитацийКонфигуратораИХранилища");
	
	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТестов() Экспорт
	
	Поделка = Новый Поделка;
	Поделка.ЗапуститьПриложение();
	
	Хост = "127.0.0.1";
	ПортХранилища = 43567;
	ПортПрокси = 43566;
	
	_Хранилище = Поделка.НайтиЖелудь("ИмитацияХранилища");
	_Хранилище.Порт = ПортХранилища;
	_Хранилище.ОжиданиеСоединения = 100;
	ФоновыеЗадания.Выполнить(_Хранилище, "Запустить");
	Приостановить(200);
	
	ПутьКФайлуПроверок = ОбъединитьПути(ТекущийКаталог(), "tests", "ПроверкиПроксиСервера_Тест.os");
	
	ПроксиСервер = Поделка.НайтиЖелудь("ЗапускательСервера");
	ПроксиСервер.ПортПрокси = ПортПрокси;
	ПроксиСервер.АдресСервера = Хост;
	ПроксиСервер.ПортСервера = ПортХранилища;
	ПроксиСервер.ОжиданиеСоединения = 100;
	ПроксиСервер.ПутьКФайлуПроверок = ПутьКФайлуПроверок;
	
	ФоновыеЗадания.Выполнить(ПроксиСервер, "Запустить");
	Приостановить(200);
	
	_Конфигуратор = Поделка.НайтиЖелудь("ИмитацияКонфигуратора");
	_Конфигуратор.Хост = Хост;
	_Конфигуратор.Порт = ПортПрокси;
	
	ВключитьПолноеЛогирование();
	
КонецПроцедуры

Процедура ВключитьПолноеЛогирование()
	Для Каждого ИмяЛога Из Логирование.СписокСозданныхЛогов("oproxy") Цикл
		_Лог = Логирование.ПолучитьЛог(ИмяЛога);
		_Лог.УстановитьУровень(УровниЛога.Отладка);
	КонецЦикла;
КонецПроцедуры

Функция СоздатьВременныйКаталог()
	УИД = Строка(Новый УникальныйИдентификатор());
	КаталогФайлов = ОбъединитьПути(КаталогВременныхФайлов(), УИД);
	СоздатьКаталог(КаталогФайлов);
	Возврат КаталогФайлов;
КонецФункции

Процедура УдалитьВременныйКаталог(КаталогФайлов)
	УдалитьФайлы(КаталогФайлов, "*.*");
	УдалитьФайлы(КаталогФайлов);
КонецПроцедуры

Функция СлучайныеДвоичныеДанныеСЗаданнымРазмером(Размер)
	Путь = ОбъединитьПути(ТекущийКаталог(), "tests", "ДвоичныеДанныеЗапросаКонфигуратораНаПомещениеДанныхВХранилище.dat");
	ДДЗапросаМакет = Новый ДвоичныеДанные(Путь);

	СтрокаЗапросаМакет = ПолучитьСтрокуИзДвоичныхДанных(ДДЗапросаМакет);
	СтрокаВставки = "случайные данные";
	ДлинаВставки = СтрДлина(СтрокаВставки);
	Позиция = СтрНайти(СтрокаЗапросаМакет, СтрокаВставки);
	ЛеваяЧастьСтроки = Лев(СтрокаЗапросаМакет, Позиция - 1);
	
	МассивШапка = СтрРазделить(ЛеваяЧастьСтроки, Символы.ПС);
	МассивШапка.Удалить(МассивШапка.ВГраница());
	МассивНачало = СтрРазделить(ЛеваяЧастьСтроки, Символы.ПС);
	МассивНачало.Удалить(0);
	МассивНачало.Удалить(0);
	МассивНачало.Удалить(0);
	МассивНачало.Удалить(0);
	МассивНачало.Удалить(0);

	СтрокаШапка = СтрСоединить(МассивШапка, Символы.ПС) + Символы.ПС;
	СтрокаНачало = МассивНачало[0];
	СтрокаКонец = Сред(СтрокаЗапросаМакет, Позиция + ДлинаВставки);

	СтрокаШапка = СтрЗаменить(СтрокаШапка, "53903", Размер);

	ДДШапка = ПолучитьДвоичныеДанныеИзСтроки(СтрокаШапка);
	ДДНачало = ПолучитьДвоичныеДанныеИзСтроки(СтрокаНачало);
	ДДКонец = ПолучитьДвоичныеДанныеИзСтроки(СтрокаКонец);

	РазмерТела = ДДНачало.Размер() + ДДКонец.Размер();

	Если Размер <= РазмерТела Тогда
		ВызватьИсключение "Минимальный размер для функции ~СлучайныеДвоичныеДанныеСЗаданнымРазмером(Размер) составляет " + (РазмерТела + 1);
	КонецЕсли;

	МассивДД = Новый Массив;
	МассивДД.Добавить(ДДШапка);
	МассивДД.Добавить(ДДНачало);

	Буфер = Новый БуферДвоичныхДанных(Размер - РазмерТела);
	ДДСлучайные = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер);
	МассивДД.Добавить(ДДСлучайные);

	МассивДД.Добавить(ДДКонец);

	СигнатураКонца = ПолучитьДвоичныеДанныеИзHexСтроки("6653B2A6");
	СигнатураПинга = ПолучитьДвоичныеДанныеИзHexСтроки("214754B3");
	МассивДД.Добавить(СигнатураКонца);
	МассивДД.Добавить(СигнатураПинга);
	МассивДД.Добавить(СигнатураПинга);
	МассивДД.Добавить(СигнатураПинга);

	Возврат СоединитьДвоичныеДанные(МассивДД);
КонецФункции

Процедура ТестДолжен_ПроверитьОбщениеИмитацийКонфигуратораИХранилища() Экспорт
	
	Ожидаем.Что(ПроксиСервер.Запущен, "сервер действительно запустился").Равно(Истина);
	
	Ожидаем.Что(_Хранилище.Запущен, "имитация хранилища работает").Равно(Истина);
	
	РезультатОткрытия = _Конфигуратор.ОткрытьСоединение();
	Ожидаем.Что(РезультатОткрытия, "конфигуратор открыл соединение").Равно(Истина);
	Ожидаем.Что(_Хранилище.Запущен, "имитация хранилища работает").Равно(Истина);
	РезультатПриветствия = _Конфигуратор.ПолучитьПриветствие();
	Ожидаем.Что(РезультатПриветствия, "хранилище поприветствовало конфигуратор").Равно(Истина);
	Ожидаем.Что(_Хранилище.Запущен, "имитация хранилища работает").Равно(Истина);

	ПроизвольныеДанные = СлучайныеДвоичныеДанныеСЗаданнымРазмером(2500);
	
	РезультатОтправки = _Конфигуратор.ОтправитьПроизвольныеДанные(ПроизвольныеДанные);
	Ожидаем.Что(РезультатОтправки, "конфигуратор передал хранилищу произвольные данные").Равно(Истина);
	Ожидаем.Что(_Хранилище.Запущен, "имитация хранилища работает").Равно(Истина);
	
	РезультатПриема = _Конфигуратор.ПолучитьОтвет();
	Ожидаем.Что(РезультатПриема, "конфигуратор получил заполненый ответ").Заполнено();
	Ожидаем.Что(РезультатПриема, "конфигуратор получил ответ в виде двоичных данных").ИмеетТип(Тип("ДвоичныеДанные"));
	Ожидаем.Что(РезультатПриема, "конфигуратор получил то, что отправлял").Равно(ПроизвольныеДанные);
	Ожидаем.Что(_Хранилище.ПолучитьПоследнееПринятоеСообщение(), "последнее сообщение конфигуратора принято хранилищем").Равно(ПроизвольныеДанные);
	
	ПроизвольныеДанные2 = СлучайныеДвоичныеДанныеСЗаданнымРазмером(5000);
	
	РезультатОтправки = _Конфигуратор.ОтправитьПроизвольныеДанные(ПроизвольныеДанные2);
	Ожидаем.Что(РезультатОтправки, "конфигуратор передал хранилищу произвольные данные").Равно(Истина);
	Ожидаем.Что(_Хранилище.Запущен, "имитация хранилища работает").Равно(Истина);
	
	РезультатПриема = _Конфигуратор.ПолучитьОтвет();
	Ожидаем.Что(РезультатПриема, "конфигуратор получил заполненый ответ").Заполнено();
	Ожидаем.Что(РезультатПриема, "конфигуратор получил ответ в виде двоичных данных").ИмеетТип(Тип("ДвоичныеДанные"));
	Ожидаем.Что(РезультатПриема, "конфигуратор получил то, что отправлял").Равно(ПроизвольныеДанные2);
	Ожидаем.Что(_Хранилище.ПолучитьПоследнееПринятоеСообщение(), "последнее сообщение конфигуратора принято хранилищем").Равно(ПроизвольныеДанные2);
	
	СигнатураПинга = ПолучитьДвоичныеДанныеИзHexСтроки("214754B3");
	РезультатОтправки = _Конфигуратор.ОтправитьПроизвольныеДанные(СигнатураПинга);
	Ожидаем.Что(РезультатОтправки, "конфигуратор передал хранилищу пинг").Равно(Истина);
	Ожидаем.Что(_Хранилище.Запущен, "имитация хранилища работает").Равно(Истина);
	
	РезультатПриема = _Конфигуратор.ПолучитьОтвет();
	Ожидаем.Что(РезультатПриема, "конфигуратор получил заполненый ответ на пинг").Заполнено();
	Ожидаем.Что(РезультатПриема, "конфигуратор получил ответ на пинг в виде двоичных данных").ИмеетТип(Тип("ДвоичныеДанные"));
	Ожидаем.Что(РезультатПриема, "конфигуратор получил в ответ на пинг то, что отправлял").Равно(СигнатураПинга);
	Ожидаем.Что(_Хранилище.Запущен, "имитация хранилища работает").Равно(Истина);
	
	РезультатЗакрытия = _Конфигуратор.ЗакрытьСоединение();
	Ожидаем.Что(РезультатЗакрытия, "конфигуратор закрыл соединение").ЭтоИстина();
	
	_Хранилище.ТребуетсяОстановка = Истина;
	Приостановить(200);
	
	Ожидаем.Что(_Хранилище.Запущен, "имитация хранилища остановилась").Равно(Ложь);
	
	ПроксиСервер.ТребуетсяОстановка = Истина;
	Приостановить(200);
	
	Ожидаем.Что(ПроксиСервер.Запущен, "сервер остановился").Равно(Ложь);
	
КонецПроцедуры

Процедура ТестДолженПроверить_ЧтоСоздаетсяФайлИнициализации() Экспорт
	КаталогФайлов = СоздатьВременныйКаталог();
	Команда = Новый Команда();
	Команда.УстановитьРабочийКаталог(КаталогФайлов);
	Путь = ОбъединитьПути(ТекущийКаталог(), "src", "main.os");
	Команда.УстановитьКоманду("oscript");
	Команда.ДобавитьПараметр(Путь);
	Команда.ДобавитьПараметр("init");
	КодВозврата = Команда.Исполнить();
	Ожидаем.Что(КодВозврата).Равно(0);
	
	МассивФайлов = НайтиФайлы(КаталогФайлов, "ПроверкиПроксиСервера.os");
	Ожидаем.Что(МассивФайлов.Количество()).Равно(1);
	УдалитьВременныйКаталог(КаталогФайлов);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоПравильноОпределяетсяПингКонфигуратора() Экспорт
	Обработчик = ОбработкаДанных;
	
	ДД_Пинг = ПолучитьДвоичныеДанныеИзHexСтроки("214754B3");
	ЭтоПинг = Обработчик.ЭтоПинг(ДД_Пинг);
	Ожидаем.Что(ЭтоПинг, "проверка сигнатуры пинга").Равно(Истина);
	
	ДД_Пинг = ПолучитьДвоичныеДанныеИзHexСтроки("214754B3214754B3214754B3214754B3214754B3");
	ЭтоПинг = Обработчик.ЭтоПинг(ДД_Пинг);
	Ожидаем.Что(ЭтоПинг, "проверка сигнатуры пинга несколько раз подряд").Равно(Истина);
	
	ДД_Пинг = ПолучитьДвоичныеДанныеИзHexСтроки("");
	ЭтоПинг = Обработчик.ЭтоПинг(ДД_Пинг);
	Ожидаем.Что(ЭтоПинг, "проверка с пустыми двоичными данными").Равно(Истина);
	
	ДД_Пинг = ПолучитьДвоичныеДанныеИзHexСтроки("A3B4C5D6");
	ЭтоПинг = Обработчик.ЭтоПинг(ДД_Пинг);
	Ожидаем.Что(ЭтоПинг, "проверка функции пинга случайными дд 1").Равно(Ложь);
	
	ДД_Пинг = ПолучитьДвоичныеДанныеИзHexСтроки("A3B4C5D6F7");
	ЭтоПинг = Обработчик.ЭтоПинг(ДД_Пинг);
	Ожидаем.Что(ЭтоПинг, "проверка функции пинга случайными дд 2").Равно(Ложь);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоПравильноОпределяетсяНачалоЗапроса() Экспорт
	Обработчик = ОбработкаДанных;
	
	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("214754B3");
	ЭтоНачалоЗапроса = Обработчик.ЭтоНачалоЗапросаДанных(ДД);
	Ожидаем.Что(ЭтоНачалоЗапроса, "проверка сигнатуры начала запроса").Равно(Ложь);
	
	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("214754B3214754B3214754B3214754B3214754B3");
	ЭтоНачалоЗапроса = Обработчик.ЭтоНачалоЗапросаДанных(ДД);
	Ожидаем.Что(ЭтоНачалоЗапроса, "проверка сигнатуры пинга несколько раз подряд").Равно(Ложь);
	
	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("");
	ЭтоНачалоЗапроса = Обработчик.ЭтоНачалоЗапросаДанных(ДД);
	Ожидаем.Что(ЭтоНачалоЗапроса, "проверка с пустыми двоичными данными").Равно(Ложь);
	
	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("A3B4C5D6");
	ЭтоНачалоЗапроса = Обработчик.ЭтоНачалоЗапросаДанных(ДД);
	Ожидаем.Что(ЭтоНачалоЗапроса, "проверка функции пинга случайными дд 1").Равно(Ложь);
	
	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("A3B4C5D6F7");
	ЭтоНачалоЗапроса = Обработчик.ЭтоНачалоЗапросаДанных(ДД);
	Ожидаем.Что(ЭтоНачалоЗапроса, "проверка функции пинга случайными дд 2").Равно(Ложь);
	
	ДД = ПолучитьДвоичныеДанныеЗапросаКонфигуратораНаПомещениеДанныхВХранилище();
	ЭтоНачалоЗапроса = Обработчик.ЭтоНачалоЗапросаДанных(ДД);
	Ожидаем.Что(ЭтоНачалоЗапроса, "начало запроса определяется верно на полных ДД").Равно(Истина);
	
	ДД = ПолучитьДвоичныеДанныеИзСтроки("POST  HTTP/1.1");
	ЭтоНачалоЗапроса = Обработчик.ЭтоНачалоЗапросаДанных(ДД);
	Ожидаем.Что(ЭтоНачалоЗапроса, "начало запроса определяется верно если есть только начало").Равно(Истина);
	
	ДД = ПолучитьДвоичныеДанныеИзСтроки("POST  HTTP/1.");
	ЭтоНачалоЗапроса = Обработчик.ЭтоНачалоЗапросаДанных(ДД);
	Ожидаем.Что(ЭтоНачалоЗапроса, "начало запроса определяется верно если есть только начало без одного символа").Равно(Ложь);
	
	ДД = ПолучитьДвоичныеДанныеИзСтроки("OST  HTTP/1.1");
	ЭтоНачалоЗапроса = Обработчик.ЭтоНачалоЗапросаДанных(ДД);
	Ожидаем.Что(ЭтоНачалоЗапроса, "начало запроса определяется верно если есть только начало без первого символа").Равно(Ложь);
	
	ДД = ПолучитьДвоичныеДанныеИзСтроки("POST  HTTP/1.1 ");
	ЭтоНачалоЗапроса = Обработчик.ЭтоНачалоЗапросаДанных(ДД);
	Ожидаем.Что(ЭтоНачалоЗапроса, "начало запроса определяется верно если есть только начало с пробелом в конце").Равно(Истина);
	
	ДД = ПолучитьДвоичныеДанныеИзСтроки(" POST  HTTP/1.1");
	ЭтоНачалоЗапроса = Обработчик.ЭтоНачалоЗапросаДанных(ДД);
	Ожидаем.Что(ЭтоНачалоЗапроса, "начало запроса определяется верно если есть только начало с пробелом в начале").Равно(Ложь);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоПравильноОпределяетсяКонецСообщения() Экспорт
	Обработчик = ОбработкаДанных;
	
	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("6653B2A6");
	ЕстьКонецСообщения = Обработчик.ЕстьКонецСообщения(ДД);
	Ожидаем.Что(ЕстьКонецСообщения, "сигнатура конца сообщения").Равно(Истина);
	
	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("6653B2A66653B2A66653B2A66653B2A66653B2A6");
	ЕстьКонецСообщения = Обработчик.ЕстьКонецСообщения(ДД);
	Ожидаем.Что(ЕстьКонецСообщения, "сигнатура конца сообщения несколько раз").Равно(Истина);
	
	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("");
	ЕстьКонецСообщения = Обработчик.ЕстьКонецСообщения(ДД);
	Ожидаем.Что(ЕстьКонецСообщения, "пустые ДД").Равно(Ложь);
	
	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("A3B4C5D6F7");
	ЕстьКонецСообщения = Обработчик.ЕстьКонецСообщения(ДД);
	Ожидаем.Что(ЕстьКонецСообщения, "случайные ДД 4 байта").Равно(Ложь);
	
	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("6653B2A6A3B4C5D6F7");
	ЕстьКонецСообщения = Обработчик.ЕстьКонецСообщения(ДД);
	Ожидаем.Что(ЕстьКонецСообщения, "первая часть - сигнатура конца, вторая - случайные").Равно(Ложь);
	
	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("A3B4C5D6F76653B2A6A3B4C5D6F7");
	ЕстьКонецСообщения = Обработчик.ЕстьКонецСообщения(ДД);
	Ожидаем.Что(ЕстьКонецСообщения, "сигнатура конца в середине между случайными").Равно(Ложь);

	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("A3B4C5D6F76653B2A6214754B3214754B3214754B3");
	ЕстьКонецСообщения = Обработчик.ЕстьКонецСообщения(ДД);
	Ожидаем.Что(ЕстьКонецСообщения, "случайные данные + сигнатура конца + несколько пингов").Равно(Истина);

	ПроизвольныеДанные = СлучайныеДвоичныеДанныеСЗаданнымРазмером(2500);
	ЕстьКонецСообщения = Обработчик.ЕстьКонецСообщения(ПроизвольныеДанные);
	Ожидаем.Что(ЕстьКонецСообщения, "произвольные данные из функции СлучайныеДвоичныеДанныеСЗаданнымРазмером").Равно(Истина);

КонецПроцедуры

Функция ПолучитьДвоичныеДанныеЗапросаКонфигуратораНаПомещениеДанныхВХранилище()
	СигнатураКонца = ПолучитьДвоичныеДанныеИзHexСтроки("6653B2A6");
	СигнатураПинга = ПолучитьДвоичныеДанныеИзHexСтроки("214754B3");
	Путь = ОбъединитьПути(ТекущийКаталог(), "tests", "ДвоичныеДанныеЗапросаКонфигуратораНаПомещениеДанныхВХранилище.dat");
	Массив = Новый Массив;
	Массив.Добавить(Новый ДвоичныеДанные(Путь));
	Массив.Добавить(СигнатураКонца);
	Массив.Добавить(СигнатураПинга);
	Массив.Добавить(СигнатураПинга);
	Массив.Добавить(СигнатураПинга);
	Возврат СоединитьДвоичныеДанные(Массив);
КонецФункции

Функция ПолучитьДвоичныеДанныеЗапросаКонфигуратораНаИзменениеВерсииВХранилище()
	СигнатураКонца = ПолучитьДвоичныеДанныеИзHexСтроки("6653B2A6");
	СигнатураПинга = ПолучитьДвоичныеДанныеИзHexСтроки("214754B3");
	Путь = ОбъединитьПути(ТекущийКаталог(), "tests", "ДвоичныеДанныеЗапросаКонфигуратораНаИзменениеВерсииВХранилище.dat");
	Массив = Новый Массив;
	Массив.Добавить(Новый ДвоичныеДанные(Путь));
	Массив.Добавить(СигнатураКонца);
	Массив.Добавить(СигнатураПинга);
	Массив.Добавить(СигнатураПинга);
	Массив.Добавить(СигнатураПинга);
	Возврат СоединитьДвоичныеДанные(Массив);
КонецФункции

Процедура ТестДолжен_ПроверитьЧтоРаботаетРазборЗапросаКонфигуратораНаПомещениеВХранилище() Экспорт
	Обработчик = ОбработкаДанных;
	ДД = ПолучитьДвоичныеДанныеЗапросаКонфигуратораНаПомещениеДанныхВХранилище();
	ПараметрыЗапроса = Обработчик.ПолучитьПараметрыЗапроса(ДД);
	Ожидаем.Что(ПараметрыЗапроса, "разбор завершится успешно").Существует().ИмеетТип("Структура");
	Ожидаем.Что(ПараметрыЗапроса.Проверять, "проверка признака Проверять из файла").Равно(Истина);
	Ожидаем.Что(ПараметрыЗапроса.ИмяСистемы, "проверка признака ИмяСистемы из файла").Равно("p_buying_test");
	Ожидаем.Что(ПараметрыЗапроса.ИмяМетода, "проверка признака ИмяМетода из файла").Равно("DevDepot_commitObjects");
	Ожидаем.Что(ПараметрыЗапроса.ВерсияПлатформы, "проверка признака ВерсияПлатформы из файла").Равно("8.3.22.2143");
	Ожидаем.Что(ПараметрыЗапроса.Комментарий, "проверка признака Комментарий из файла").Равно("тестовый комментарий");
	Ожидаем.Что(ПараметрыЗапроса.ИмяПользователя, "проверка признака ИмяПользователя из файла").Равно("Administrator");
	Ожидаем.Что(ПараметрыЗапроса.ВерсияКонфигурации, "проверка признака Версия конфигурации из файла").Равно("1.497");
	
	ПараметрыЗапроса = Обработчик.ПолучитьПараметрыЗапроса(ПолучитьДвоичныеДанныеИзHexСтроки(""));
	Ожидаем.Что(ПараметрыЗапроса, "на пустых ДД выдаст неопределено").Равно(Неопределено);
	
	ПараметрыЗапроса = Обработчик.ПолучитьПараметрыЗапроса(ПолучитьДвоичныеДанныеИзHexСтроки("A3B4C5F6"));
	Ожидаем.Что(ПараметрыЗапроса, "на случайных ДД выдаст неопределено").Равно(Неопределено);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоРаботаетРазборЗапросаКонфигуратораНаИзменениеВерсииВХранилище() Экспорт
	Обработчик = ОбработкаДанных;
	ДД = ПолучитьДвоичныеДанныеЗапросаКонфигуратораНаИзменениеВерсииВХранилище();
	ПараметрыЗапроса = Обработчик.ПолучитьПараметрыЗапроса(ДД);
	Ожидаем.Что(ПараметрыЗапроса, "разбор завершится успешно").Существует().ИмеетТип("Структура");
	Ожидаем.Что(ПараметрыЗапроса.Проверять, "проверка признака Проверять из файла").Равно(Истина);
	Ожидаем.Что(ПараметрыЗапроса.ИмяСистемы, "проверка признака ИмяСистемы из файла").Равно("test_master");
	Ожидаем.Что(ПараметрыЗапроса.ИмяМетода, "проверка признака ИмяМетода из файла").Равно("DevDepot_changeVersion");
	Ожидаем.Что(ПараметрыЗапроса.ВерсияПлатформы, "проверка признака ВерсияПлатформы из файла").Равно("8.3.22.2143");
	Ожидаем.Что(ПараметрыЗапроса.Комментарий, "проверка признака Комментарий из файла").Равно("Комментарий стал");
	Ожидаем.Что(ПараметрыЗапроса.КомментарийБыл, "проверка признака Комментарий предыдущий из файла").Равно("комментарий был");
	Ожидаем.Что(ПараметрыЗапроса.ИмяПользователя, "проверка признака ИмяПользователя из файла").Равно("vrunner");
	Ожидаем.Что(ПараметрыЗапроса.Метка, "проверка признака Метка из файла").Равно("Метка новая");
	Ожидаем.Что(ПараметрыЗапроса.КомментарийМетки, "проверка признака Комментарий метки из файла").Равно("Комментарий метки");
	Ожидаем.Что(ПараметрыЗапроса.ВерсияКонфигурации, "проверка признака Версия конфигурации из файла").Равно("1.2.3.4");
	
КонецПроцедуры

Процедура ТекстДолжен_ПроверитьЧтоФайлПроверокПодключается() Экспорт
	ПутьКФайлуПроверок = ОбъединитьПути(ТекущийКаталог(), "tests", "ПроверкиПроксиСервера_Тест.os");
	лОбъект = РаботаСФайломПроверок.Подключить(ПутьКФайлуПроверок);
	Заполнен = лОбъект <> Неопределено;
	Ожидаем.Что(Заполнен).Равно(Истина);
	
	лОбъект = РаботаСФайломПроверок.Подключить(ПутьКФайлуПроверок);
	Заполнен = лОбъект <> Неопределено;
	Ожидаем.Что(Заполнен).Равно(Истина);
КонецПроцедуры

//ПередЗапускомТестов();
//ВключитьПолноеЛогирование();
//ТестДолжен_ПроверитьОбщениеИмитацийКонфигуратораИХранилища();
//ТестДолжен_ПроверитьЧтоПравильноОпределяетсяКонецСообщения();