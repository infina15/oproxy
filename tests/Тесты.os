#Использовать 1commands
#Использовать asserts
#Использовать ".."

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоПравильноОпределяетсяПингКонфигуратора");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоПравильноОпределяетсяКонецСообщения");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоРаботаетРазборЗапросаКонфигуратораНаПомещениеВХранилище");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтоРаботаетРазборЗапросаКонфигуратораНаИзменениеВерсииВХранилище");
	ВсеТесты.Добавить("ТекстДолжен_ПроверитьЧтоФайлПроверокПодключается");
	ВсеТесты.Добавить("ТестДолженПроверить_ЧтоСоздаетсяФайлИнициализации");

	Возврат ВсеТесты;
КонецФункции

Процедура ТестовыйТест() Экспорт
	//Результат = ПростоМодуль.ПроверкаСвязи();
	//Ожидаем.Что(Результат).Равно(1);
КонецПроцедуры

Функция СоздатьВременныйКаталог()
	УИД = Строка(Новый УникальныйИдентификатор());
	КаталогФайлов = ОбъединитьПути(КаталогВременныхФайлов(), УИД);
	СоздатьКаталог(КаталогФайлов);
	Возврат КаталогФайлов;
КонецФункции

Процедура УдалитьВременныйКаталог(КаталогФайлов)
	УдалитьФайлы(КаталогФайлов, "*.*");
	УдалитьФайлы(КаталогФайлов);
КонецПроцедуры

Процедура ТестДолженПроверить_ЧтоСоздаетсяФайлИнициализации() Экспорт
	КаталогФайлов = СоздатьВременныйКаталог();
	Команда = Новый Команда();
	Команда.УстановитьРабочийКаталог(КаталогФайлов);
	Путь = ОбъединитьПути(ТекущийКаталог(), "src", "main.os");
	Команда.УстановитьКоманду("oscript");
	Команда.ДобавитьПараметр(Путь);
	Команда.ДобавитьПараметр("init");
	КодВозврата = Команда.Исполнить();
	Ожидаем.Что(КодВозврата).Равно(0);

	МассивФайлов = НайтиФайлы(КаталогФайлов, "ПроверкиПроксиСервера.os");
	Ожидаем.Что(МассивФайлов.Количество()).Равно(1);
	УдалитьВременныйКаталог(КаталогФайлов);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоПравильноОпределяетсяПингКонфигуратора() Экспорт
	Обработчик = ОбработкаДанных;

	ДД_Пинг = ПолучитьДвоичныеДанныеИзHexСтроки("214754B3");
	ЭтоПинг = Обработчик.ЭтоПинг(ДД_Пинг);
	Ожидаем.Что(ЭтоПинг, "проверка сигнатуры пинга").Равно(Истина);

	ДД_Пинг = ПолучитьДвоичныеДанныеИзHexСтроки("214754B3214754B3214754B3214754B3214754B3");
	ЭтоПинг = Обработчик.ЭтоПинг(ДД_Пинг);
	Ожидаем.Что(ЭтоПинг, "проверка сигнатуры пинга несколько раз подряд").Равно(Истина);

	ДД_Пинг = ПолучитьДвоичныеДанныеИзHexСтроки("");
	ЭтоПинг = Обработчик.ЭтоПинг(ДД_Пинг);
	Ожидаем.Что(ЭтоПинг, "проверка с пустыми двоичными данными").Равно(Истина);

	ДД_Пинг = ПолучитьДвоичныеДанныеИзHexСтроки("A3B4C5D6");
	ЭтоПинг = Обработчик.ЭтоПинг(ДД_Пинг);
	Ожидаем.Что(ЭтоПинг, "проверка функции пинга случайными дд 1").Равно(Ложь);

	ДД_Пинг = ПолучитьДвоичныеДанныеИзHexСтроки("A3B4C5D6F7");
	ЭтоПинг = Обработчик.ЭтоПинг(ДД_Пинг);
	Ожидаем.Что(ЭтоПинг, "проверка функции пинга случайными дд 2").Равно(Ложь);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоПравильноОпределяетсяКонецСообщения() Экспорт
	Обработчик = ОбработкаДанных;

	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("6653B2A6");
	ЕстьКонецСообщения = Обработчик.ЕстьКонецСообщения(ДД);
	Ожидаем.Что(ЕстьКонецСообщения, "сигнатура конца сообщения").Равно(Истина);

	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("6653B2A66653B2A66653B2A66653B2A66653B2A6");
	ЕстьКонецСообщения = Обработчик.ЕстьКонецСообщения(ДД);
	Ожидаем.Что(ЕстьКонецСообщения, "сигнатура конца сообщения несколько раз").Равно(Истина);

	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("");
	ЕстьКонецСообщения = Обработчик.ЕстьКонецСообщения(ДД);
	Ожидаем.Что(ЕстьКонецСообщения, "пустые ДД").Равно(Ложь);

	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("A3B4C5D6F7");
	ЕстьКонецСообщения = Обработчик.ЕстьКонецСообщения(ДД);
	Ожидаем.Что(ЕстьКонецСообщения, "случайные ДД 4 байта").Равно(Ложь);

	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("6653B2A6A3B4C5D6F7");
	ЕстьКонецСообщения = Обработчик.ЕстьКонецСообщения(ДД);
	Ожидаем.Что(ЕстьКонецСообщения, "первая часть - сигнатура конца, вторая - случайные").Равно(Ложь);

	ДД = ПолучитьДвоичныеДанныеИзHexСтроки("A3B4C5D6F76653B2A6A3B4C5D6F7");
	ЕстьКонецСообщения = Обработчик.ЕстьКонецСообщения(ДД);
	Ожидаем.Что(ЕстьКонецСообщения, "сигнатура конца в середине между случайными").Равно(Ложь);
КонецПроцедуры

Функция ПолучитьДвоичныеДанныеЗапросаКонфигуратораНаПомещениеДанныхВХранилище()
	Путь = ОбъединитьПути(ТекущийКаталог(), "tests", "ДвоичныеДанныеЗапросаКонфигуратораНаПомещениеДанныхВХранилище.dat");
	Возврат Новый ДвоичныеДанные(Путь);
КонецФункции

Функция ПолучитьДвоичныеДанныеЗапросаКонфигуратораНаИзменениеВерсииВХранилище()
	Путь = ОбъединитьПути(ТекущийКаталог(), "tests", "ДвоичныеДанныеЗапросаКонфигуратораНаИзменениеВерсииВХранилище.dat");
	Возврат Новый ДвоичныеДанные(Путь);
КонецФункции

Процедура ТестДолжен_ПроверитьЧтоРаботаетРазборЗапросаКонфигуратораНаПомещениеВХранилище() Экспорт
	Обработчик = ОбработкаДанных;
	ДД = ПолучитьДвоичныеДанныеЗапросаКонфигуратораНаПомещениеДанныхВХранилище();
	ПараметрыЗапроса = Обработчик.ПолучитьПараметрыЗапроса(ДД);
	Ожидаем.Что(ПараметрыЗапроса.Проверять, "проверка признака Проверять из файла").Равно(Истина);
	Ожидаем.Что(ПараметрыЗапроса.ИмяСистемы, "проверка признака ИмяСистемы из файла").Равно("p_buying_test");
	Ожидаем.Что(ПараметрыЗапроса.ИмяМетода, "проверка признака ИмяМетода из файла").Равно("DevDepot_commitObjects");
	Ожидаем.Что(ПараметрыЗапроса.ВерсияПлатформы, "проверка признака ВерсияПлатформы из файла").Равно("8.3.22.2143");
	Ожидаем.Что(ПараметрыЗапроса.Комментарий, "проверка признака Комментарий из файла").Равно("тестовый комментарий");
	Ожидаем.Что(ПараметрыЗапроса.ИмяПользователя, "проверка признака ИмяПользователя из файла").Равно("Administrator");
	Ожидаем.Что(ПараметрыЗапроса.ВерсияКонфигурации, "проверка признака Версия конфигурации из файла").Равно("1.497");

	ПараметрыЗапроса = Обработчик.ПолучитьПараметрыЗапроса(ПолучитьДвоичныеДанныеИзHexСтроки(""));
	Ожидаем.Что(ПараметрыЗапроса, "на пустых ДД выдаст неопределено").Равно(Неопределено);

	ПараметрыЗапроса = Обработчик.ПолучитьПараметрыЗапроса(ПолучитьДвоичныеДанныеИзHexСтроки("A3B4C5F6"));
	Ожидаем.Что(ПараметрыЗапроса, "на случайных ДД выдаст неопределено").Равно(Неопределено);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоРаботаетРазборЗапросаКонфигуратораНаИзменениеВерсииВХранилище() Экспорт
	Обработчик = ОбработкаДанных;
	ДД = ПолучитьДвоичныеДанныеЗапросаКонфигуратораНаИзменениеВерсииВХранилище();
	ПараметрыЗапроса = Обработчик.ПолучитьПараметрыЗапроса(ДД);
	Ожидаем.Что(ПараметрыЗапроса, "разбор завершится успешно").Существует().ИмеетТип("Структура");
	Ожидаем.Что(ПараметрыЗапроса.Проверять, "проверка признака Проверять из файла").Равно(Истина);
	Ожидаем.Что(ПараметрыЗапроса.ИмяСистемы, "проверка признака ИмяСистемы из файла").Равно("test_master");
	Ожидаем.Что(ПараметрыЗапроса.ИмяМетода, "проверка признака ИмяМетода из файла").Равно("DevDepot_changeVersion");
	Ожидаем.Что(ПараметрыЗапроса.ВерсияПлатформы, "проверка признака ВерсияПлатформы из файла").Равно("8.3.22.2143");
	Ожидаем.Что(ПараметрыЗапроса.Комментарий, "проверка признака Комментарий из файла").Равно("Комментарий стал");
	Ожидаем.Что(ПараметрыЗапроса.ИмяПользователя, "проверка признака ИмяПользователя из файла").Равно("vrunner");
	Ожидаем.Что(ПараметрыЗапроса.Метка, "проверка признака Метка из файла").Равно("Метка новая");
	Ожидаем.Что(ПараметрыЗапроса.КомментарийМетки, "проверка признака Комментарий метки из файла").Равно("Комментарий метки");
	Ожидаем.Что(ПараметрыЗапроса.ВерсияКонфигурации, "проверка признака Версия конфигурации из файла").Равно("1.2.3.4");

КонецПроцедуры

Процедура ТекстДолжен_ПроверитьЧтоФайлПроверокПодключается() Экспорт
	ПутьКФайлуПроверок = ОбъединитьПути(ТекущийКаталог(), "features", "ПроверкиПроксиСервера_Пример.os");
	лОбъект = РаботаСФайломПроверок.Подключить(ПутьКФайлуПроверок);
	Заполнен = лОбъект <> Неопределено;
	Ожидаем.Что(Заполнен).Равно(Истина);

	лОбъект = РаботаСФайломПроверок.Подключить(ПутьКФайлуПроверок);
	Заполнен = лОбъект <> Неопределено;
	Ожидаем.Что(Заполнен).Равно(Истина);
КонецПроцедуры