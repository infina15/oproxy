&ЛогПроксиСервера
Перем Лог;

Перем ПроверкиПроксиСервера Экспорт;
Перем АдресСервера Экспорт;
Перем ПортСервера Экспорт;
Перем ПриветствиеХранилища;
Перем ПустыеДД;
Перем Настройки;

&Желудь
Процедура ПриСозданииОбъекта(&Пластилин("Настройки") _Настройки)
    ПриветствиеХранилища = ПолучитьДвоичныеДанныеИзHexСтроки("53F5C61A7B");
    ПустыеДД = ПолучитьДвоичныеДанныеИзHexСтроки("");
    Настройки = _Настройки;
КонецПроцедуры

Процедура ОбработатьСоединение(Соединение_Конфигуратор) Экспорт
    Соединение_Хранилище = Неопределено;
    Лог.Информация("Начало обработки соединения");

    Пока Соединение_Конфигуратор.Активно Цикл
        Если ИзКонфигуратораВХранилище(Соединение_Конфигуратор, Соединение_Хранилище) Тогда
            ИзХранилищаВКонфигуратор(Соединение_Конфигуратор, Соединение_Хранилище);
            ПостОбработкаПомещенияВХранилище();
        КонецЕсли;
    КонецЦикла;

    Лог.Информация("Соединение завершено. Закрытие соединений.");
    Соединение_Конфигуратор.Закрыть();
    Соединение_Хранилище.Закрыть();
КонецПроцедуры

Функция ИзКонфигуратораВХранилище(Соединение_Конфигуратор, Соединение_Хранилище)
    Лог.Отладка("Начало передачи данных из конфигуратора в хранилище");

    ДанныеСоединения = Неопределено;
    ЕстьПодключениеКХранилищу = Соединение_Хранилище <> Неопределено;
    Если НЕ ЕстьПодключениеКХранилищу Тогда
        ИнициализироватьСоединениеСХранилищем(Соединение_Конфигуратор, Соединение_Хранилище, ДанныеСоединения);
    КонецЕсли;
    ЭтоКонецСообщения = Ложь;
    ЭтоПинг = Ложь;
    Пока НЕ ЭтоКонецСообщения Цикл
        Если ЕстьПодключениеКХранилищу Тогда
            ДанныеСоединения = Соединение_Конфигуратор.ПрочитатьДвоичныеДанные();
        Иначе
            ЕстьПодключениеКХранилищу = Истина;
        КонецЕсли;
        ЭтоПинг = ОбработкаДанных.ЭтоПинг(ДанныеСоединения);
        Если НЕ ЭтоПинг Тогда
            ПараметрыЗапроса = ОбработкаДанных.ПолучитьПараметрыЗапроса(ДанныеСоединения);
            Если ПараметрыЗапроса <> Неопределено
                И ПараметрыЗапроса.Проверять = Истина Тогда
                ПродолжитьСоединение = ОбработатьПроверяемыйЗапрос(Соединение_Конфигуратор, Соединение_Хранилище, ДанныеСоединения);
                Возврат ПродолжитьСоединение;
            КонецЕсли;
        КонецЕсли;
        Соединение_Хранилище.ОтправитьДвоичныеДанные(ДанныеСоединения);
        Если ЭтоПинг Тогда
            Лог.Отладка("Отправка пустых данных для пинга");
            Соединение_Конфигуратор.ОтправитьДвоичныеДанные(ПустыеДД);
            ЭтоКонецСообщения = Истина;
        Иначе
            ЭтоКонецСообщения = ОбработкаДанных.ЕстьКонецСообщения(ДанныеСоединения);
        КонецЕсли;
    КонецЦикла;

    Лог.Отладка("Передача данных из конфигуратора в хранилище завершена");
    Возврат НЕ ЭтоПинг;
КонецФункции

Функция ОбработатьПроверяемыйЗапрос(Соединение_Конфигуратор, Соединение_Хранилище, ДанныеСоединения)
    Лог.Информация("Начало обработки проверяемого запроса");
    
    МассивДДЗапроса = Новый Массив;
    МассивДДЗапроса.Добавить(ДанныеСоединения);
    Пока НЕ ОбработкаДанных.ЕстьКонецСообщения(ДанныеСоединения) Цикл
        ДанныеСоединения = Соединение_Конфигуратор.ПрочитатьДвоичныеДанные();
        МассивДДЗапроса.Добавить(ДанныеСоединения);
    КонецЦикла;
    ДанныеСоединения = СоединитьДвоичныеДанные(МассивДДЗапроса);
    ПараметрыЗапроса = ОбработкаДанных.ПолучитьПараметрыЗапроса(ДанныеСоединения);
    ТекстОшибки = "";
    Попытка
        Если ПараметрыЗапроса.ИмяМетода = "DevDepot_commitObjects" Тогда
            Лог.Информация("Обработка запроса DevDepot_commitObjects (Помещение в хранилище)");
            ТекстОшибки = ПроверкиПроксиСервера.ОбработкаПомещенияВХранилище(ПараметрыЗапроса);
        ИначеЕсли ПараметрыЗапроса.ИмяМетода = "DevDepot_changeVersion" Тогда
            Лог.Информация("Обработка запроса DevDepot_changeVersion (Изменение версии)");
            ТекстОшибки = ПроверкиПроксиСервера.ОбработкаИзмененияВерсииХранилища(ПараметрыЗапроса);
        ИначеЕсли ПараметрыЗапроса.ИмяМетода = "DevDepotAdmin_createDevDepot" Тогда
            Лог.Информация("Обработка запроса DevDepotAdmin_createDevDepot (Создание хранилища)");
            ТекстОшибки = ПроверкиПроксиСервера.ОбработкаСозданияХранилища(ПараметрыЗапроса);
        КонецЕсли;
    Исключение
        ТекстОшибки = СтрШаблон("Ошибка вызова функции в файле ""ПроверкиПроксиСервера.os"": %1", ОписаниеОшибки());
        Лог.Ошибка(ТекстОшибки);
    КонецПопытки;
    ЕстьОшибка = НЕ ПустаяСтрока(ТекстОшибки);
    Если ЕстьОшибка Тогда
        ДД = ОбработкаДанных.ПолучитьДвоичныеДанныеОтветаОшибки(ТекстОшибки);
        Соединение_Конфигуратор.ОтправитьДвоичныеДанные(ДД);
        Лог.Ошибка(ТекстОшибки);
        Возврат Ложь;
    Иначе
        Для Каждого ДанныеСоединения Из МассивДДЗапроса Цикл
            Соединение_Хранилище.ОтправитьДвоичныеДанные(ДанныеСоединения);
        КонецЦикла;
    КонецЕсли;
    Лог.Информация("Запрос успешно обработан");
    Возврат НЕ ЕстьОшибка;
КонецФункции

Процедура ИзХранилищаВКонфигуратор(Соединение_Конфигуратор, Соединение_Хранилище)
    Лог.Отладка("Начало передачи данные из хранилища в конфигуратор");

    ЭтоКонецСообщения = Ложь;
    Пока НЕ ЭтоКонецСообщения Цикл
        ДанныеСоединения = Соединение_Хранилище.ПрочитатьДвоичныеДанные();
        Соединение_Конфигуратор.ОтправитьДвоичныеДанные(ДанныеСоединения);
        ЭтоКонецСообщения = ОбработкаДанных.ЕстьКонецСообщения(ДанныеСоединения);
    КонецЦикла;

    Лог.Отладка("Передача данных из хранилища в конфигуратор завершена");
    Лог.Отладка("");
КонецПроцедуры

Процедура ИнициализироватьСоединениеСХранилищем(Соединение_Конфигуратор, Соединение_Хранилище, ДанныеПервогоЗапроса)
    Лог.Информация("Инициализация соединения с хранилищем");

    Соединение_Конфигуратор.ОтправитьДвоичныеДанные(ПриветствиеХранилища);
    ДанныеПервогоЗапроса = Соединение_Конфигуратор.ПрочитатьДвоичныеДанные();
    ПараметрыЗапроса = ОбработкаДанных.ПолучитьПараметрыЗапроса(ДанныеПервогоЗапроса);
    
    ПортСервераПоВерсии = ОпределитьПортСервераПоВерсииПлатформы(ПараметрыЗапроса.ВерсияПлатформы);
    Лог.Информация("Подключаюсь к хранилищу %1. Версия платформы: %2; Порт сервера хранилищ: %3", 
        ПараметрыЗапроса.ИмяСистемы, ПараметрыЗапроса.ВерсияПлатформы, ПортСервераПоВерсии);
    
    Соединение_Хранилище = Новый TCPСоединение(АдресСервера, ПортСервераПоВерсии);
    Соединение_Хранилище.ПрочитатьДвоичныеДанные();

    Лог.Информация("Соединение с хранилищем установлено");
КонецПроцедуры

Процедура ПостОбработкаПомещенияВХранилище()
    РезультатБулево = ПроверкиПроксиСервера.ПостОбработкаПомещенияВХранилище();
КонецПроцедуры

Функция ОпределитьПортСервераПоВерсииПлатформы(ВерсияПлатформы)

    Если Настройки.ПортыХранилищ = Неопределено Тогда
        Лог.Отладка("Используется порт указанный в параметрах запуска сервера");
        Возврат ПортСервера;
    КонецЕсли;

    ПортИзФайлаНастроек = Настройки.ПортыХранилищ.Получить(ВерсияПлатформы);
    Если ПортИзФайлаНастроек = Неопределено Тогда
        Лог.Отладка("Используется порт указанный в параметрах запуска сервера");
        Возврат ПортСервера;
    Иначе
        Лог.Отладка("Используется порт указанный в файле настроек autumn-properties.json");
        Возврат ПортИзФайлаНастроек;
    КонецЕсли;

КонецФункции
