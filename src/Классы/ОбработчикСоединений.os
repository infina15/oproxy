#Использовать autumn-logos

&Лог("oproxy")
Перем Лог;

Перем ПроверкиПроксиСервера Экспорт;
Перем АдресСервера Экспорт;
Перем ПортСервера Экспорт;
Перем ПриветствиеХранилища;

&Желудь
Процедура ПриСозданииОбъекта()
	ПриветствиеХранилища = ПолучитьДвоичныеДанныеИзHexСтроки("53F5C61A7B");
	ПустыеДД = ПолучитьДвоичныеДанныеИзHexСтроки("");
КонецПроцедуры

Процедура ОбработатьСоединение(Соединение_Конфигуратор, НомерСоединения) Экспорт
	БылоПриветствие = Ложь;
	Попытка
		Соединение_Хранилище = Неопределено;
		Пока Соединение_Конфигуратор.Активно Цикл
			Лог.Отладка(СтрШаблон("Соединение %1: >>> конфигуратор >>> хранилище >>>", НомерСоединения));
			//принять запрос (возможно в память, возможно в файл)
			ЗапросКонфигуратора = ПолучитьДанныеКонфигуратора(Соединение_Конфигуратор, БылоПриветствие);
			Лог.Отладка(СтрШаблон("Соединение %1: >>> конфигуратор >>> хранилище >>> после запроса", НомерСоединения));
			//проанализировать
			
			//решать отдавать в хранилище или вернуть ошибку
			
			//если это начало соединения, то понять куда соединяться и отдать соединение
			Если Соединение_Хранилище = Неопределено Тогда
				Соединение_Хранилище = Новый TCPСоединение(АдресСервера, ПортСервера);
				ДанныеХранилища = Соединение_Хранилище.ПрочитатьДвоичныеДанные();
				Если ДанныеХранилища <> ПриветствиеХранилища Тогда
					ТекстОшибки = "Принятые данные хранилища не являются приветствием";
					Лог.Ошибка(ТекстОшибки);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
			Для каждого Пакет из ЗапросКонфигуратора.МассивДвоичныхДанных Цикл
				Соединение_Хранилище.ОтправитьДвоичныеДанные(Пакет);
			КонецЦикла;

			Если ЗапросКонфигуратора.ЭтоПинг Тогда
				Для каждого Пакет из ЗапросКонфигуратора.МассивДвоичныхДанных Цикл
					Соединение_Конфигуратор.ОтправитьДвоичныеДанные(Пакет);
				КонецЦикла;
			Иначе
				ИзХранилищаВКонфигуратор(Соединение_Конфигуратор, Соединение_Хранилище, НомерСоединения);
			КонецЕсли;
			//Если ИзКонфигуратораВХранилище(Соединение_Конфигуратор, Соединение_Хранилище, НомерСоединения) Тогда
			//	ИзХранилищаВКонфигуратор(Соединение_Конфигуратор, Соединение_Хранилище, НомерСоединения);
			//	ПостОбработкаПомещенияВХранилище();
			//КонецЕсли;
		КонецЦикла;
		Соединение_Конфигуратор.Закрыть();
		Соединение_Хранилище.Закрыть();
		Лог.Отладка(СтрШаблон("Соединение %1: закрыто", НомерСоединения));
	Исключение
		Лог.Ошибка(СтрШаблон("Соединение %1: закрыто принудительно, описание ошибки: %2", НомерСоединения, ОписаниеОшибки()));
	КонецПопытки;
КонецПроцедуры

//Функция ИзКонфигуратораВХранилище(Соединение_Конфигуратор, Соединение_Хранилище, НомерСоединения)
//	ДанныеСоединения = Неопределено;
//	ЕстьПодключениеКХранилищу = Соединение_Хранилище <> Неопределено;
//	Если НЕ ЕстьПодключениеКХранилищу Тогда
//		ИнициализироватьСоединениеСХранилищем(Соединение_Конфигуратор, Соединение_Хранилище, ДанныеСоединения);
//		Лог.Отладка(СтрШаблон("Соединение %1: подключение к хранилищу", НомерСоединения));
//	КонецЕсли;
//	ЭтоКонецСообщения = Ложь;
//	ЭтоПинг = Ложь;
//	Пока НЕ ЭтоКонецСообщения Цикл
//		Если ЕстьПодключениеКХранилищу Тогда
//			Лог.Отладка(СтрШаблон("Соединение %1: начало чтения ДД из конфигуратора", НомерСоединения));
//			Лог.Отладка(СтрШаблон("Соединение %1: конфигуратор активен: %2, хранилище активно %3", НомерСоединения, Соединение_Конфигуратор.Активно, Соединение_Хранилище.Активно));
//			ДанныеСоединения = Соединение_Конфигуратор.ПрочитатьДвоичныеДанные();
//			Лог.Отладка(СтрШаблон("Соединение %1: конфигуратор активен: %2, хранилище активно %3", НомерСоединения, Соединение_Конфигуратор.Активно, Соединение_Хранилище.Активно));
//			Лог.Отладка(СтрШаблон("Соединение %1: конец чтения ДД из конфигуратора", НомерСоединения));
//		Иначе
//			ЕстьПодключениеКХранилищу = Истина;
//		КонецЕсли;
//		РазмерДанных = ДанныеСоединения.Размер();
//		ЭтоПинг = РазмерДанных = 20 ИЛИ РазмерДанных = 32 ИЛИ ОбработкаДанных.ЭтоПинг(ДанныеСоединения);
//		Если НЕ ЭтоПинг Тогда
//			ПараметрыЗапроса = ОбработкаДанных.ПолучитьПараметрыЗапроса(ДанныеСоединения);
//			Если ПараметрыЗапроса <> Неопределено
//				И ПараметрыЗапроса.Проверять = Истина Тогда
//				ПродолжитьСоединение = ОбработатьПроверяемыйЗапрос(Соединение_Конфигуратор, Соединение_Хранилище, ДанныеСоединения);
//				Возврат ПродолжитьСоединение;
//			КонецЕсли;
//		КонецЕсли;
//		Лог.Отладка(СтрШаблон("Соединение %1: отправка в хранилище", НомерСоединения));
//		Соединение_Хранилище.ОтправитьДвоичныеДанные(ДанныеСоединения);
//		Лог.Отладка(СтрШаблон("Соединение %1: конец отправки в хранилище", НомерСоединения));
//		Если ЭтоПинг = Истина Тогда
//			Лог.Отладка(СтрШаблон("Соединение %1: начало отправка ответа пинга в конфигуратор", НомерСоединения));
//			Лог.Отладка(СтрШаблон("Соединение %1: ДД хранилища прочитаны", НомерСоединения));
//			Соединение_Конфигуратор.ОтправитьДвоичныеДанные(ДанныеСоединения);
//			Лог.Отладка(СтрШаблон("Соединение %1: конец отправка ответа пинга в конфигуратор", НомерСоединения));
//			ЭтоКонецСообщения = Истина;
//		Иначе
//			Лог.Отладка(СтрШаблон("Соединение %1: это не пинг", НомерСоединения));
//			ЭтоКонецСообщения = ОбработкаДанных.ЕстьКонецСообщения(ДанныеСоединения);
//			Лог.Отладка(СтрШаблон("Соединение %1: конец выяснения конца сообщения", НомерСоединения));
//		КонецЕсли;
//	КонецЦикла;
//	Лог.Отладка(СтрШаблон("Соединение %1: выход из процедуры ИзКонфигуратораВХранилище", НомерСоединения));
//	Возврат НЕ ЭтоПинг;
//КонецФункции

Функция ПолучитьДанныеКонфигуратора(Соединение_Конфигуратор, БылоПриветствие)
	Результат = Новый Структура;
	ЭтоКонецСообщения = Ложь;
	ЭтоПинг = Ложь;
	РазмерЗапроса = 0;
	МассивДвоичныхДанных = Новый Массив;
	Если НЕ БылоПриветствие Тогда
		Соединение_Конфигуратор.ОтправитьДвоичныеДанные(ПриветствиеХранилища);
		БылоПриветствие = Истина;
	КонецЕсли;
	ДанныеСоединения = Соединение_Конфигуратор.ПрочитатьДвоичныеДанные();
	МассивДвоичныхДанных.Добавить(ДанныеСоединения);
	ЭтоПинг = НЕ ОбработкаДанных.ЭтоНачалоЗапросаДанных(ДанныеСоединения);
	Если ЭтоПинг Тогда
		ЭтоКонецСообщения = Истина;
	Иначе
		ЭтоКонецСообщения = ОбработкаДанных.ЕстьКонецСообщения(ДанныеСоединения);
		РазмерЗапроса = ОбработкаДанных.ПолучитьРазмерЗапроса(ДанныеСоединения);
		Лог.Отладка(СтрШаблон("Размер запроса конфигуратора %1", РазмерЗапроса));
	КонецЕсли;
	Пока НЕ ЭтоКонецСообщения Цикл
		ДанныеСоединения = Соединение_Конфигуратор.ПрочитатьДвоичныеДанные();
		ЭтоКонецСообщения = ОбработкаДанных.ЕстьКонецСообщения(ДанныеСоединения);
		МассивДвоичныхДанных.Добавить(ДанныеСоединения);
	КонецЦикла;
	Результат.Вставить("ЭтоПинг", ЭтоПинг);
	Результат.Вставить("РазмерЗапроса", РазмерЗапроса);
	Результат.Вставить("МассивДвоичныхДанных", МассивДвоичныхДанных);
	Возврат Результат;
КонецФункции

Функция ОбработатьПроверяемыйЗапрос(Соединение_Конфигуратор, Соединение_Хранилище, ДанныеСоединения)
	МассивДДЗапроса = Новый Массив;
	МассивДДЗапроса.Добавить(ДанныеСоединения);
	//где-то здесь надо начать писать в файл
	Пока НЕ ОбработкаДанных.ЕстьКонецСообщения(ДанныеСоединения) Цикл
		ДанныеСоединения = Соединение_Конфигуратор.ПрочитатьДвоичныеДанные();
		МассивДДЗапроса.Добавить(ДанныеСоединения);
	КонецЦикла;
	//а тут соединить без основного тела
	ДанныеСоединения = СоединитьДвоичныеДанные(МассивДДЗапроса);
	ПараметрыЗапроса = ОбработкаДанных.ПолучитьПараметрыЗапроса(ДанныеСоединения);
	ТекстОшибки = "";
	Попытка
		Если ПараметрыЗапроса.ИмяМетода = "DevDepot_commitObjects" Тогда
			ТекстОшибки = ПроверкиПроксиСервера.ОбработкаПомещенияВХранилище(ПараметрыЗапроса);
		ИначеЕсли ПараметрыЗапроса.ИмяМетода = "DevDepot_changeVersion" Тогда
			ТекстОшибки = ПроверкиПроксиСервера.ОбработкаИзмененияВерсииХранилища(ПараметрыЗапроса);
		КонецЕсли;
	Исключение
		ТекстОшибки = СтрШаблон("Ошибка вызова функции в файле ""ПроверкиПроксиСервера.os"": %1", ОписаниеОшибки());
	КонецПопытки;
	ЕстьОшибка = НЕ ПустаяСтрока(ТекстОшибки);
	Если ЕстьОшибка Тогда
		ДД = ОбработкаДанных.ПолучитьДвоичныеДанныеОтветаОшибки(ТекстОшибки);
		Соединение_Конфигуратор.ОтправитьДвоичныеДанные(ДД);
		Возврат Ложь;
	Иначе
		Для Каждого ДанныеСоединения Из МассивДДЗапроса Цикл
			Соединение_Хранилище.ОтправитьДвоичныеДанные(ДанныеСоединения);
		КонецЦикла;
	КонецЕсли;
	Возврат НЕ ЕстьОшибка;
КонецФункции

Процедура ИзХранилищаВКонфигуратор(Соединение_Конфигуратор, Соединение_Хранилище, НомерСоединения)
	ЭтоКонецСообщения = Ложь;
	Размер = 0;
	Лог.Отладка(СтрШаблон("Соединение %1: <<< конфигуратор <<< хранилище <<<", НомерСоединения));
	Лог.Отладка(СтрШаблон("Соединение %1: конфигуратор активен: %2, хранилище активно %3", НомерСоединения, Соединение_Конфигуратор.Активно, Соединение_Хранилище.Активно));
	Пока НЕ ЭтоКонецСообщения Цикл
		ДанныеСоединения = Соединение_Хранилище.ПрочитатьДвоичныеДанные();
		Размер = Размер + ДанныеСоединения.Размер();
		Соединение_Конфигуратор.ОтправитьДвоичныеДанные(ДанныеСоединения);
		ЭтоКонецСообщения = ОбработкаДанных.ЕстьКонецСообщения(ДанныеСоединения);
	КонецЦикла;
	Лог.Отладка(СтрШаблон("Соединение %1: конфигуратор активен: %2, хранилище активно %3", НомерСоединения, Соединение_Конфигуратор.Активно, Соединение_Хранилище.Активно));
	Лог.Отладка(СтрШаблон("Соединение %1: <<< конфигуратор <<< хранилище <<< : %2 КБ", НомерСоединения, Цел(Размер / 1024)));
КонецПроцедуры

Процедура ИнициализироватьСоединениеСХранилищем(Соединение_Конфигуратор, Соединение_Хранилище, ДанныеПервогоЗапроса)
	//Соединение_Конфигуратор.ОтправитьДвоичныеДанные(ПриветствиеХранилища);
	//ДанныеПервогоЗапроса = Соединение_Конфигуратор.ПрочитатьДвоичныеДанные();
	//Соединение_Хранилище = Новый TCPСоединение(АдресСервера, ПортСервера);
	//Соединение_Хранилище.ПрочитатьДвоичныеДанные();
	Соединение_Хранилище = Новый TCPСоединение(АдресСервера, ПортСервера);
	//Соединение_Хранилище.ОтправитьДвоичныеДанные(ПустыеДД);
	ДанныеХранилища = Соединение_Хранилище.ПрочитатьДвоичныеДанные();
	Если ДанныеХранилища <> ПриветствиеХранилища Тогда
		ТекстОшибки = "Принятые данные хранилища не являются приветствием";
		Лог.Ошибка(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Соединение_Конфигуратор.ОтправитьДвоичныеДанные(ДанныеХранилища);
	ДанныеПервогоЗапроса = Соединение_Конфигуратор.ПрочитатьДвоичныеДанные();
КонецПроцедуры

Процедура ПостОбработкаПомещенияВХранилище()
	РезультатБулево = ПроверкиПроксиСервера.ПостОбработкаПомещенияВХранилище();
КонецПроцедуры